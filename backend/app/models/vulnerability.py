# JADE Ultimate Security Platform - Vulnerability Model

from sqlalchemy import Column, String, Boolean, DateTime, Integer, ForeignKey, JSON, Float, func
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID as PG_UUID
from uuid import uuid4
from app.core.database import Base
import datetime

class Vulnerability(Base):
    __tablename__ = "vulnerabilities"
    id = Column(PG_UUID(as_uuid=True), primary_key=True, default=uuid4)
    scan_id = Column(PG_UUID(as_uuid=True), ForeignKey("scans.id"), nullable=False)
    title = Column(String(128), nullable=False)
    description = Column(String(1024), nullable=True)
    vulnerability_type = Column(String(64), nullable=False)
    severity = Column(String(16), nullable=False)
    risk_score = Column(Float, default=0)
    host = Column(String(128), nullable=True)
    port = Column(Integer, nullable=True)
    service = Column(String(64), nullable=True)
    remediation = Column(String(512), nullable=True)
    evidence = Column(JSON, default=dict)
    cvss_score = Column(Float, nullable=True)
    cve_id = Column(String(32), nullable=True)
    cwe_id = Column(String(32), nullable=True)
    detected_at = Column(DateTime, default=func.now())
    is_resolved = Column(Boolean, default=False)
    resolution_notes = Column(String(512), nullable=True)
    resolved_at = Column(DateTime, nullable=True)
    ai_analysis = Column(JSON, default=dict)

    scan = relationship("Scan", back_populates="vulnerabilities")

    def calculate_risk_score(self):
        # Example: Use CVSS if present, else assign default by severity
        if self.cvss_score is not None:
            self.risk_score = self.cvss_score
        elif self.severity == "critical":
            self.risk_score = 9.0
        elif self.severity == "high":
            self.risk_score = 7.0
        elif self.severity == "medium":
            self.risk_score = 5.0
        elif self.severity == "low":
            self.risk_score = 3.0
        else:
            self.risk_score = 1.0

    def update_severity_from_cvss(self):
        if self.cvss_score is not None:
            if self.cvss_score >= 9.0:
                self.severity = "critical"
            elif self.cvss_score >= 7.0:
                self.severity = "high"
            elif self.cvss_score >= 5.0:
                self.severity = "medium"
            elif self.cvss_score >= 3.0:
                self.severity = "low"
            else:
                self.severity = "info"

    def to_dict(self):
        return {
            "id": str(self.id),
            "title": self.title,
            "description": self.description,
            "type": self.vulnerability_type,
            "severity": self.severity,
            "risk_score": self.risk_score,
            "host": self.host,
            "port": self.port,
            "service": self.service,
            "remediation": self.remediation,
            "evidence": self.evidence,
            "cvss_score": self.cvss_score,
            "cve_id": self.cve_id,
            "cwe_id": self.cwe_id,
            "detected_at": self.detected_at.isoformat() if self.detected_at else None,
            "is_resolved": self.is_resolved,
            "resolution_notes": self.resolution_notes,
            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,
            "ai_analysis": self.ai_analysis,
        }